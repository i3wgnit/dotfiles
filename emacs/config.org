#+TITLE: Emacs configuration
#+AUTHOR: Ting Wei Liu
#+CREATOR: twl
#+OPTIONS: toc:4
#+STARTUP: overview

* Head
** Packages

Adding a few extra repos,
because GNU is not enough.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

Function to install packages

#+BEGIN_SRC emacs-lisp
(defun twl//install-package (pkg)
  (unless (package-installed-p pkg)
    (package-refresh-contents)
    (package-install pkg)))
#+END_SRC

*** use-package

I tried writing my configs without use-package once
and it was a bit painful.

#+BEGIN_SRC emacs-lisp
(twl//install-package 'general)
(twl//install-package 'diminish)
(twl//install-package 'use-package)
(setq use-package-verbose t
      use-package-always-ensure t)
(eval-when-compile
  (require 'use-package))
(require 'general)
(general-auto-unbind-keys)
(require 'diminish)
#+END_SRC

*** auto-package-update

This is for having the most recent packages.

#+BEGIN_SRC emacs-lisp
;; (use-package auto-package-update
;;   :defer 1
;;   :config
;;   (setq auto-package-update-delete-old-versions t)
;;   (setq auto-package-update-hide-results t)
;;   (auto-package-update-maybe))
#+END_SRC

*** try

#+BEGIN_SRC emacs-lisp
(use-package try
  :commands (try try-and-refresh))
#+END_SRC

** quality of life

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** custom file

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file :noerror)
#+END_SRC

** Security Vulnerability

#+BEGIN_SRC emacs-lisp
(eval-after-load "enriched"
  '(defun enriched-decode-display-prop (start end &optional param)
     (list start end)))
#+END_SRC

* Custom functions
** Configs

To quickly visit config file
#+BEGIN_SRC emacs-lisp
(defun twl//config-visit ()
  "Visit ~/.emacs.d/config.org"
  (interactive)
  (find-file "~/.emacs.d/config.org"))
#+END_SRC

To reload config.org
#+BEGIN_SRC emacs-lisp
(defun twl//config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime."
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC

Compile init folder
#+BEGIN_SRC emacs-lisp
(defun twl//byte-compile-init-dit ()
  "Byte-compile all your settings."
  (interactive)
  (byte-recompile-directory user-emacs-directory 0))
#+END_SRC

** Misc

To open a scratch buffer
#+BEGIN_SRC emacs-lisp
(defun twl//scratch-buffer ()
  "Switch to a scratch buffer"
  (interactive)
  (let ((buf (get-buffer "*scratch*")))
    (if buf (switch-to-buffer buf)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))))
#+END_SRC

Remove annoying scratch buffer message
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC

To kill current buffer
#+BEGIN_SRC emacs-lisp
(defun twl//kill-cur-buffer ()
  "Kill the current buffer without prompt"
  (interactive)
  (kill-buffer (current-buffer)))
#+END_SRC

To rename the current file
#+BEGIN_SRC emacs-lisp
(defun twl//rename-file (new-name)
  (interactive "FNew name: ")
  (let ((filename (buffer-file-name)))
    (if filename
        (progn
          (when (buffer-modified-p)
            (save-buffer))
          (rename-file filename new-name t)
          (kill-buffer (current-buffer))
          (find-file new-name)
          (message "Renamed '%s' -> '%s'" filename new-name))
      (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))
#+END_SRC

"I have always wanted a function like this" - Me, 2018
#+BEGIN_SRC emacs-lisp
(defun twl//insert-date ()
  "Function to insert date into buffer"
  (interactive)
  (insert (format-time-string
           "%B %d, %Y" (current-time))))
#+END_SRC

** Keybings

#+BEGIN_SRC emacs-lisp
(general-def 'global
  "C-c e" 'twl//config-visit
  "C-c r" 'twl//config-reload
  "C-c b" 'twl//scratch-buffer)
#+END_SRC

** Custom variables

Leader key

#+BEGIN_SRC emacs-lisp
(defvar *leader* ",")
#+END_SRC
* Core
** evil mode
*** state-modes

#+BEGIN_SRC emacs-lisp
(setq twl/evil-state-modes
      '((evil-motion-state-modes
         recentf-dialog-mode)
        (evil-emacs-state-modes
         magit-popup-mode)))
#+END_SRC

*** evil

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-emacs-state-modes nil
        evil-search-module 'evil-search
        evil-vsplit-window-right t
        evil-split-window-below t)
  :config
  (dolist (_s twl/evil-state-modes)
    (dolist (_m (cdr _s))
      (add-to-list (car _s) _m)))
  (evil-mode 1))
#+END_SRC

*** evil collection

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-setup-minibuffer t)
  :config
  (evil-collection-init))
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
(general-def 'motion 'override
  :prefix *leader*
  "w" 'save-buffer
  "q" 'twl//kill-cur-buffer
  "e" 'find-file
  "b" 'ibuffer
  "h" 'dired-jump
  "x" 'execute-extended-command
  "r" 'revert-buffer
  "j" 'recentf-open-files)
#+END_SRC

*** plug-ins
**** evil-surround

evil-surround is the one package I always use.
At this point, I just cannot live without this.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+END_SRC

**** evil-indent-plus

I have always had this package installed,
however I have yet to use it.

#+BEGIN_SRC emacs-lisp
(use-package evil-indent-plus
  :after evil)
#+END_SRC

**** evil-matchit

This is not as useful as I thought it was.
I do not like this.

#+BEGIN_SRC emacs-lisp
;; (use-package evil-matchit
;;   :after evil
;;   :config
;;   (global-evil-matchit-mode 1))
#+END_SRC

**** evil-lion

This has a lot of potential, although I am not sure how often I will use this.

#+BEGIN_SRC emacs-lisp
(use-package evil-lion
  :after evil
  :config
  (evil-lion-mode 1))
#+END_SRC

**** evil-anzu

This might seem minor, but is actually such a life saver.
#+BEGIN_SRC emacs-lisp
(use-package evil-anzu
  :after evil
  :init
  (setq anzu-cons-mode-line-p nil))
#+END_SRC

** Display
*** Font

#+BEGIN_SRC emacs-lisp
(set-frame-font "Iosevka Term-14")
(add-hook 'focus-in-hook
          (lambda () (set-frame-font "Iosevka Term-14")))
#+END_SRC

*** Theme

Load theme advice

#+BEGIN_SRC emacs-lisp
(defun load-theme--theme-dont-propagate (&rest args)
  "Disable all theme effects before enabling new ones"
  (mapc #'disable-theme custom-enabled-themes))
(advice-add 'load-theme :before #'load-theme--theme-dont-propagate)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :config
  (load-theme 'doom-vibrant t)
  (doom-themes-org-config))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (use-package spacemacs-theme
;;   :config
;;   (load-theme 'spacemacs-dark t))
#+END_SRC

*** Modeline

I really like spaceline

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (require 'spaceline-config)
  (setq powerline-default-separator 'arrow)
  (spaceline-spacemacs-theme))
#+END_SRC

*** diminish

#+BEGIN_SRC emacs-lisp
(defmacro twl|diminish-minor-mode (filename mode &optional abbrev)
  `(eval-after-load (symbol-name ,filename)
     '(diminish ,mode ,abbrev)))

(defmacro twl|diminish-major-mode (mode-hook abbrev)
  `(add-hook ,mode-hook
             (lambda () (setq mode-name ,abbrev))))

(twl|diminish-minor-mode 'undo-tree 'undo-tree-mode)
(twl|diminish-minor-mode 'eldoc 'eldoc-mode)
#+END_SRC

** Completion
*** flx

Better fuzzy find for =ivy=.
Otherwise, it looks very rainbow-ish and unbearable.
#+BEGIN_SRC emacs-lisp
(use-package flx)
#+END_SRC

**** counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :diminish counsel-mode
  :config
  (counsel-mode 1))
#+END_SRC

*** ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :after flx
  :defer nil
  :diminish ivy-mode
  :general
  (:states 'motion :prefix *leader*
           "/" 'swiper)
  :init
  (setq ivy-use-virtual-buffers t
        ivy-count-format "%d/%d "
        ivy-use-selectable-prompt t)
  :config
  (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t . ivy--regex-fuzzy)))
  (ivy-mode 1))
#+END_SRC

*** company

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :hook (prog-mode . company-mode)
  :init
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 3))
#+END_SRC

**** company-flx

#+BEGIN_SRC emacs-lisp
(use-package company-flx
  :after (company flx)
  :config
  (company-flx-mode 1))
#+END_SRC

* Better defaults
** Settings
*** UTF-8

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8-unix)
#+END_SRC

*** Backup

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      version-control t
      backup-by-copying t
      delete-old-versions t
      save-place-file "~/.emacs.d/saveplace")
#+END_SRC

*** Scrolling

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 3
      scroll-conservatively 10000
      scroll-preserve-screen-position t)
#+END_SRC

*** Lines and spacing

#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
(setq-default indicate-empty-lines t
              indent-tabs-mode nil
              tab-width 4
              display-line-numbers 'relative
              fill-column 80)
#+END_SRC

*** Misc

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore
      help-window-select t
      load-prefer-newer t
      echo-keystrokes 0.1
      show-paren-delay 0
      show-paren-style 'mixed
      prettify-symbols-unprettify-at-point 'right-edge
      display-time-24hr-format t)
#+END_SRC

*** Disabled functions

#+BEGIN_SRC emacs-lisp
(put 'set-goal-column 'disabled nil)
#+END_SRC

** Builtin packages
*** Builtin modes

#+BEGIN_SRC emacs-lisp
(setq twl/builtin-packages
      '((blink-cursor-mode . nil)
        (display-time-mode . t)
        (electric-pair-mode . t)
        (global-prettify-symbols-mode . t)
        (global-hl-line-mode . t)
        (global-whitespace-mode . t)
        (horizontal-scroll-bar-mode . nil)
        (menu-bar-mode . nil)
        (recentf-mode . t)
        (save-place-mode . t)
        (scroll-bar-mode . nil)
        (show-paren-mode . t)
        (tool-bar-mode . nil)))
(dolist (_bp twl/builtin-packages)
  (let ((mode (car _bp)))
    (if (cdr _bp)
        (add-hook 'after-init-hook mode)
      (when (fboundp mode)
        (funcall mode -1)))))
#+END_SRC

*** recentf

#+BEGIN_SRC emacs-lisp
(setq recentf-max-saved-items 500
      recentf-max-menu-items 50
      recentf-auto-cleanup 'never)
#+END_SRC

*** tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh"
      tramp-backup-directory-alist backup-directory-alist)
#+END_SRC

*** uniquify

#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'reverse)
#+END_SRC

*** dired

#+BEGIN_SRC emacs-lisp
(setq dired-recursive-copies 'always
      dired-recursive-deletes 'always
      dired-dwim-target t)
#+END_SRC

*** whitespace

#+BEGIN_SRC emacs-lisp
(setq whitespace-style
      '(face empty lines-tail trailing indentation)
      whitespace-line-column fill-column)
(twl|diminish-minor-mode 'whitespace 'global-whitespace-mode)
#+END_SRC

*** flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :diminish
  :hook
  ((prog-mode . flyspell-prog-mode)
   (text-mode . flyspell-mode))
  :config
  (setq ispell-program-name "/usr/bin/aspell"
        ispell-extra-args '("--sug-mode=ultra"))
  (ispell-change-dictionary "en_CA"))
#+END_SRC

* Packages
** avy

This allows for jumping to whichever word on the screen I want.
I do not actively use this, but this seems very efficient.
#+BEGIN_SRC emacs-lisp
(use-package avy
  :general
  (:states 'motion :prefix *leader*
           "s" 'avy-goto-word-0)
  :config
  (setq avy-all-windows t))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :general
  (:states 'motion :prefix *leader*
           "g" 'magit-status)
  :config
  (setq magit-push-always-verify nil
        git-commit-summary-max-length 50))
#+END_SRC

evil-mode is the best thing in the world.
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :after (evil magit))
#+END_SRC

** YASnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1))
#+END_SRC

*** yasnippet-snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+END_SRC

** lsp-mode

#+BEGIN_SRC emacs-lisp
;; (use-package lsp-mode
;;   )
#+END_SRC

* Minor modes
** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :hook (prog-mode . flycheck-mode))
#+END_SRC

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode 1))
#+END_SRC

** rainbow-delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode)
#+END_SRC

** golden-ratio

#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :diminish golden-ratio-mode
  :config
  (setq golden-ratio-extra-commands
        (append golden-ratio-extra-commands
                '(evil-window-left
                  evil-window-right
                  evil-window-up
                  evil-window-down
                  select-window-1
                  select-window-2
                  select-window-3
                  select-window-4
                  select-window-5)))
  (golden-ratio-mode 1))
#+END_SRC

* Major modes
** text mode

#+BeGIN_SRC emacs-lisp
(add-hook 'text-mode #'flyspell-mode)
#+EnD_SRC

** org mode

#+BEGIN_SRC emacs-lisp
(use-package org)
#+END_SRC

*** better defaults

#+BEGIN_SRC emacs-lisp
(setq-default org-confirm-babel-evaluate nil)
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-enforce-todo-dependencies t
      org-return-follows-link t
      org-confirm-elisp-link-function nil
      org-log-done t)
#+END_SRC

**** hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** evil-org

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :diminish evil-org-mode
  :hook
  (((org-mode org-agenda-mode) . evil-org-mode)
   (evil-org-mode . evil-org-set-key-theme))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

*** org agenda

**** Better Defaults

#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-on-weekday 0
      org-refile-use-outline-path t
      org-outline-path-complete-in-steps nil
      org-agenda-files '("~/org")
      org-default-notes-file "notes.org"
      org-refile-targets '((nil :maxlevel . 3)
                           ("school.org" :level . 2)
                           ("main.org" :maxlevel . 3))
      org-todo-keywords '((sequence "TODO" "DOING" "DONE"))
      org-todo-keyword-faces '(("IN_PROGRESS" . "#FF9900"))
      org-agenda-prefix-format '((agenda . " %i %-12:c%?12 b%?-12t% s")
                                 (todo . " %i %-12:c%12 b")
                                 (tags . " %i %-12:c%12 b")
                                 (search . " %i %-12:c%12 b")))
(general-def 'global
  "C-c a" 'org-agenda)
#+END_SRC

**** Capture Templates

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("a" "Assignment" entry (file "notes.org")
         "* TODO %?\nDEADLINE: %t")))
#+END_SRC

*** org-babel

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((asymptote . t)
   (dot . t)
   (latex . t)
   (R . t)
   (plantuml . t)))
#+END_SRC

*** Export Options
**** ox-twbs

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :after org)
(use-package htmlize)
#+END_SRC

**** ox-reveal

#+BEGIN_SRC emacs-lisp
;; (use-package ox-reveal
;;   :init (setq org-reveal-root "~/src/reveal.js"))
#+END_SRC

** Lispy modes

#+BEGIN_SRC emacs-lisp
(defun twl//lispy-mode-hooks ()
  (rainbow-delimiters-mode))

(dolist (_h '(emacs-lisp-mode-hook
              lisp-mode-hook
              scheme-mode-hook
              racket-mode-hook))
  (add-hook _h 'twl//lispy-mode-hooks))
#+END_SRC

** LaTeX mode
*** LatexMK

This is bad, as it somehow removes the prettify-symbols
#+BEGIN_SRC emacs-lisp
;(use-package auctex-latexmk
;  :config
;  (auctex-latexmk-setup))
#+END_SRC

So I made my own? jk I copied this =^^=
#+BEGIN_SRC emacs-lisp
(defun twl//latexmk-setup ()
  (add-to-list 'TeX-expand-list
               '("%(-PDF)"
                 (lambda ()
                   (concat (if TeX-PDF-mode "-pdf " "")
                           (cond
                            ((eq TeX-engine 'default) "")
                            ((eq TeX-engine 'xetex)
                             (concat (if TeX-PDF-mode "-pdflatex=" "-") "xelatex "))
                            ((eq TeX-engine 'luatex) "-lualatex ")
                            (t ""))))))
  (add-to-list 'TeX-command-list
               '("LatexMK" "latexmk %(-PDF)%S%(mode) %(file-line-error) %(extraopts) %t"
                 TeX-run-TeX nil t)))
#+END_SRC

Also, heres a quick latex compile command
#+BEGIN_SRC emacs-lisp
(defun twl//latexmk-compile ()
  (interactive)
  (TeX-command-select-master)
  (TeX-command "LatexMK"))
#+END_SRC

*** Hooks

#+BEGIN_SRC emacs-lisp
(defun twl//latex-mode-hooks ()
  (reftex-mode 1)
  (LaTeX-math-mode 1)
  (flyspell-mode 1)
  (flycheck-mode 1)
  (company-mode 1)

  (add-to-list 'TeX-view-program-selection
               '(output-pdf "Zathura"))
  (TeX-source-correlate-mode 1)

  (twl//latexmk-setup)
  (setq TeX-command-default "LatexMK"))
#+END_SRC

*** LaTeX-fill-sentence

#+BEGIN_SRC emacs-lisp
(defun LaTeX-fill-region-as-paragraph--fill-sentence
    (orig-fun from to &rest args)
  "Start each sentence on a new line."
  (let ((to-marker (set-marker (make-marker) to))
        tmp-end)
    (while (< from (marker-position to-marker))
      (forward-sentence)
      (when (looking-at " ") (backward-char))
      ;; might have gone beyond to-marker --- use whichever is smaller:
      (setq to (setq tmp-end (min (point) (marker-position to-marker))))
      (apply orig-fun from to args)
      (setq from (point))
      (unless (or (bolp)
                  (eolp)
                  (texmathp)
                  (looking-back "^ *")
                  (looking-at ". *$"))
        (LaTeX-newline)))
    (set-marker to-marker nil)))
#+END_SRC

*** LaTeX-fill-prettify-toggle

#+BEGIN_SRC emacs-lisp
(defun LaTeX-fill--prettify-toggle
    (orig-fun &rest args)
  (let ((prettify-mode-initial (if prettify-symbols-mode 1 0)))
    (prettify-symbols-mode 0)
    (apply orig-fun args)
    (prettify-symbols-mode prettify-mode-initial)))
#+END_SRC

*** AUCTeX

#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :hook (LaTeX-mode . twl//latex-mode-hooks)
  :general
  (normal LaTeX-mode-map "M-q" 'LaTeX-fill-paragraph)
  (visual LaTeX-mode-map "M-q" 'LaTeX-fill-region)
  :init
  (setq TeX-auto-save t
        TeX-parse-self t
        reftex-plug-intoAUCTeX t
        TeX-electric-escape nil
        TeX-insert-braces nil
        LaTeX-fill-break-at-separators '(\\\( \\\[ \\\])
        LaTeX-math-list '(("v0" "varnothing")))
  :config
  (advice-add 'LaTeX-fill-region-as-paragraph
              :around #'LaTeX-fill-region-as-paragraph--fill-sentence)
  (advice-add 'LaTeX-fill-paragraph
              :around #'LaTeX-fill--prettify-toggle)
  (advice-add 'LaTeX-fill-region
              :around #'LaTeX-fill--prettify-toggle)
  (advice-add 'LaTeX-fill-environment
              :around #'LaTeX-fill--prettify-toggle))
#+END_SRC

*** Auto completion

#+BEGIN_SRC emacs-lisp
(defun twl//latex-company-backends ()
  (setq-local company-backends
              '((company-math-symbols-latex
                 company-auctex-macros
                 company-auctex-environments
                 company-reftex-citations
                 company-reftex-labels))))

(use-package company-math
  :after (tex company)
  :init (setq company-math-allow-unicode-symbols-in-faces nil))

(use-package company-auctex
  :after company-math)

(use-package company-reftex
  :after company-auctex
  :hook (LaTeX-mode . twl//latex-company-backends))
#+END_SRC

** plantuml

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :interpreter
  ("plantuml" . plantuml-mode)
  :config
  (setq plantuml-jar-path (expand-file-name "~/src/plantuml/plantuml.jar"))
  (setq org-plantuml-jar-path plantuml-jar-path))
#+END_SRC

** C/C++ mode

#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4)
#+END_SRC

*** irony

I thought this was nice at first, but then I discovered `lsp`s

#+BEGIN_SRC emacs-lisp
;; (use-package irony
;;   :hook
;;   (((c++-mode c-mode) . irony-mode)
;;    (irony-mode . irony-cdb-autosetup-compile-options)))
#+END_SRC

**** company-irony

#+BEGIN_SRC emacs-lisp
;; (use-package company-irony
;;   :after (irony company))

;; (use-package company-irony-c-headers
;;   :after company-irony
;;   :hook
;;   (irony-mode .
;;               (lambda ()
;;                 (setq-local company-backends
;;                      '((company-irony
;;                         company-irony-c-headers))))))
#+END_SRC
